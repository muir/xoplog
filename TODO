Consider replacing SeedModifier with a seed modifier type...
	Instead of
		log.Step(...SeedModifier)
		and functions that produce SeedModifier
	have:
		log.Step(func(SeedModifier))
		and methods on SeedModifier that directly write to the seed

Should Template() be a line starter rather than an ender?

For enums from OTEL, generate them from the protobuf constants.

Drop the makefile in favor of more sophisticated use of generics  See example of enumer in zitadel/oidc

Use ZSON for main transport?  https://www.brimdata.io/blog/unmarshal-interface/
Use BSON for main transport?

Hmmm, if entire trace is a bytes string, it can be treated as  StrAttribute...

Add stack to error & alert logs.

Add timetamps to logs.  How?

Add caller to logs when wanted.

Figure out how baseloggers can share resources with each other.

Use generics to make type-safe Enum span attributes: can't do it as a method on Span, but can
do it as a function. 

Rename "xoplog" -> "xop"

Figure out a way to enforce limited vocabulary on select Attributes and Data elements

Line attributes

Build a key/value table of the templates seen.
See https://github.com/dgraph-io/ristretto for possible techniques
Number the templates

Add tests:
	Span attributes
	Structued lines
	All todos

Base loggers:
	Console to io.Writer
	JSON to io.Writer
	Gateway into Jaeger
	Gateway into Open Telementry
	Stream send to server (need to write server !)
	Gateways to other loggers so that xoplog can be used by libraries:
		logur
		zerolog
		onelog
		zap
		standard "log"

Round out the kinds of things that can be logged:
	Tables
	Pre-encoded data

Allow base loggers to resources (span attribute tracking, JSON formatting)

Pull in speed hacks from phuslog
Or maybe https://github.com/francoispqt/gojay (but then it would only be as fast a onelog)

Metrics
	
	Re-use attribute naming?

	Allow "tags" or some other multi-dimensional naming

Events

	Gets counted

	Re-use attributes?

	Attach arbitrary data

Can chaining be done with generics?

	type bot interface{
		Int(string, int64)
		Bool(string, bool)
		New() bot
	}

	type top interface{

	type Builder[T:any, B:bot] struct {
		T
	}
	func (b Builder[T]) Int8(k string, v int8) Builder[T] 
